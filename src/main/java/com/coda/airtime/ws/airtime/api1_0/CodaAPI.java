package com.coda.airtime.ws.airtime.api1_0;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.6.2
 * 2012-08-23T09:52:44.366-07:00
 * Generated source version: 2.6.2
 * 
 */
@WebServiceClient(name = "soap-v1.0", 
                  wsdlLocation = "https://sandbox.codapayments.com/airtime/api/soap/v1.0?wsdl",
                  targetNamespace = "http://ws.airtime.coda.com/airtime/api1.0") 
public class CodaAPI extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://ws.airtime.coda.com/airtime/api1.0", "soap-v1.0");
    public final static QName Api = new QName("http://ws.airtime.coda.com/airtime/api1.0", "api");
    static {
        URL url = null;
        try {
            url = new URL("https://sandbox.codapayments.com/airtime/api/soap/v1.0?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(CodaAPI.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "https://sandbox.codapayments.com/airtime/api/soap/v1.0?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public CodaAPI(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public CodaAPI(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public CodaAPI() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     *
     * @return
     *     returns Payment
     */
    @WebEndpoint(name = "api")
    public Payment getApi() {
        return super.getPort(Api, Payment.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns Payment
     */
    @WebEndpoint(name = "api")
    public Payment getApi(WebServiceFeature... features) {
        return super.getPort(Api, Payment.class, features);
    }

}
